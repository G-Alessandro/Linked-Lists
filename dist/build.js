(()=>{"use strict";class t{constructor(t){this.value=t||null,this.next=null}}const s=new class{constructor(){this.head=null,this.tail=null}listArray(){const t=[];let s=this.head;for(;s;)t.push(s.value),s=s.next;return t}append(s){const i=new t(s);this.head?(this.tail.next=i,this.tail=i):(this.head=i,this.tail=i)}prepend(s){const i=new t(s);this.head?(i.next=this.head,this.head=i):(this.head=i,this.tail=i)}size(){console.log("Linked-list size:",this.listArray().length)}getFirst(){console.log("First:",this.head.value)}getLast(){console.log("Last:",this.tail.value)}at(t){void 0===this.listArray()[t]?console.log(`The index ${t} does not exist!`):console.log(`In index ${t} there is: ${this.listArray()[t]}!`)}contains(t){this.listArray().includes(t)?console.log(`True! ${t} is in the list!`):console.log(`False! ${t} is not in the list!`)}toString(){console.log("Linked-list:",this.listArray().join(" -> "))}};s.append(10),s.append(20),s.append(30),s.append(40),s.prepend(60),s.toString(),s.size(),s.getFirst(),s.getLast(),s.at(3),s.at(5),s.contains(20),s.contains(50)})();