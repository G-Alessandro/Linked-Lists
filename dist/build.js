(()=>{"use strict";class t{constructor(t){this.value=t||null,this.next=null}}const i=new class{constructor(){this.head=null,this.tail=null}listArray(){const t=[];let i=this.head;for(;i;)t.push(i.value),i=i.next;return t}append(i){const s=new t(i);this.head?(this.tail.next=s,this.tail=s):(this.head=s,this.tail=s)}prepend(i){const s=new t(i);this.head?(s.next=this.head,this.head=s):(this.head=s,this.tail=s)}size(){console.log("Linked-list size:",this.listArray().length)}getFirst(){console.log("First:",this.head.value)}getLast(){console.log("Last:",this.tail.value)}at(t){void 0===this.listArray()[t]?console.log(`The index ${t} does not exist!`):console.log(`In index ${t} there is: ${this.listArray()[t]}!`)}pop(){if(this.head===this.tail)return this.head=null,void(this.tail=null);let t=this.head,i=null;for(;t.next;)i=t,t=t.next;i.next=null,this.tail=i}contains(t){this.listArray().includes(t)?console.log(`True! ${t} is in the list!`):console.log(`False! ${t} is not in the list!`)}find(t){let i="null";this.listArray().forEach((s=>{s===t&&(i=this.listArray().indexOf(s))})),"null"===i?console.log("Value not found!"):console.log(`The index of the value is ${i}!`)}toString(){console.log("Linked-list:",this.listArray().join(" -> "))}};i.append(10),i.append(20),i.append(30),i.append(40),i.prepend(60),i.toString(),i.pop(),i.toString(),i.size(),i.getFirst(),i.getLast(),i.at(3),i.at(5),i.contains(20),i.contains(50),i.find(30),i.find(70)})();